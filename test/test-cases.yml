good-cases:
  path: ../examples/good/
  cases:
    - name: Returns unit
      file: unit.bg
      out: ""
      return: 0
    - name: Returns int
      file: int.bg
      out: 0
      return: 0
    - name: Returns int different from 0
      file: int-exit_code.bg
      out: 42
      return: 42
    - name: If return code is bigger than 256, modulo is returned
      file: int-exit_code-bigger-256.bg
      out: 1234567890
      return: 210
    - name: If return code is equal to 256, 0 is returned
      file: int-exit_code-256.bg
      out: 256
      return: 0
    - name: Returns True
      file: bool-true.bg
      out: True
      return: 0
    - name: Returns False
      file: bool-false.bg
      out: False
      return: 1
    - name: Should add integers
      file: add.bg
      out: 3
      return: 3
    - name: Should subtract integers
      file: sub.bg
      out: 1
      return: 1
    - name: Should multiply integers
      file: mul.bg
      out: 42
      return: 42
    - name: Should divide integers
      file: div.bg
      out: 2
      return: 2
    - name: Should divide integers using integer division
      file: div-int.bg
      out: 2
      return: 2
    - name: Should perform modulo operation on integers
      file: mod.bg
      out: 2
      return: 2
    - name: Integers should be equal
      file: eq-true.bg
      out: True
      return: 0
    - name: Integers should not be equal
      file: eq-false.bg
      out: False
      return: 1
    - name: Integer should be bigger than another integer
      file: gt-true.bg
      out: True
      return: 0
    - name: Integer should not be bigger than another integer
      file: gt-false.bg
      out: False
      return: 1
    - name: Variable integers should be equal
      file: eq-variable.bg
      out: True
      return: 0
    - name: Var integers should be equal
      file: eq-variable-var-true.bg
      out: True
      return: 0
    - name: Var integers should not be equal
      file: eq-variable-var-false.bg
      out: False
      return: 1
    - name: Give calculations should be performed correctly
      file: some-calculations.bg
      out: True
      return: 0
    - name: Should create variable
      file: variable.bg
      out: ""
      return: 0
    - name: Should correctly check types for var and int
      file: variable-type-check.bg
      out: 42
      return: 42
    - name: Should return variable value for int
      file: variable-int.bg
      out: 42
      return: 42
    - name: Should return variable value for bool
      file: variable-bool.bg
      out: True
      return: 0
    - name: Should return variable value for unit
      file: variable-unit.bg
      out: ""
      return: 0
    - name: Should return variable value for var int
      file: variable-var-int.bg
      out: 7
      return: 7
    - name: Should return variable value for var bool
      file: variable-var-bool.bg
      out: False
      return: 1
    - name: Should return variable value for var unit
      file: variable-var-unit.bg
      out: ""
      return: 0
    - name: Variable creation should return unit and only last variable call returns value
      file: variable-creation.bg
      out: False
      return: 1
    - name: You can overwrite variables and the last assigned value is returned
      file: variable-overwrite.bg
      out: 42
      return: 42
    - name: Should return first value from two integers
      file: return-first-value-int.bg
      out: 42
      return: 42
    - name: Should return first value from two bools
      file: return-first-value-bool.bg
      out: True
      return: 0
    - name: Should return first value from bool and integer
      file: return-first-value-bool-int.bg
      out: True
      return: 0
    - name: Should return first non-unit value
      file: return-first-value-bool-int.bg
      out: True
      return: 0
    - name: Should not throw error if it's after return
      file: no-error-after-return.bg
      out: 42
      return: 42
    - name: while loop should run when condition met
      file: simple-while.bg
      out: 42
      return: 42
    - name: while loop should return value if expression returns value
      file: no-error-after-return.bg
      out: 42
      return: 42
    - name: while loop shouldn't execute if condition isn't met
      file: while-false.bg
      out: False
      return: 1
    - name: if-else should return first branch if True
      file: if-else-true.bg
      out: 1
      return: 1
    - name: if-else should return second branch if False
      file: if-else-false.bg
      out: 2
      return: 2
    - name: when should return value if True
      file: when-true.bg
      out: 5
      return: 5
    - name: when should return unit if False
      file: when-false.bg
      out: ""
      return: 0
    - name: Function declaration should return unit and only last variable call returns value
      file: function-creation.bg
      out: False
      return: 1
    - name: Function returning var should be able to return int
      file: function-var-int.bg
      out: 42
      return: 42
    - name: Function returning var should be able to return bool
      file: function-var-bool.bg
      out: True
      return: 0
    - name: Function returning var should be able to return unit
      file: function-var-unit.bg
      out: ""
      return: 0
    - name: Function returning int should return int
      file: function-int.bg
      out: 42
      return: 42
    - name: Function returning bool should return bool
      file: function-bool.bg
      out: False
      return: 1
    - name: Function returning unit should return unit
      file: function-unit.bg
      out: ""
      return: 0
    - name: Function returning var should be able to return int after multiple unit
      file: function-multiple-unit-int.bg
      out: 7
      return: 7
    - name: or should return True if either True
      file: or.bg
      out: ""
      return: 0
    - name: and should return True if both True
      file: and.bg
      out: ""
      return: 0
    - name: not should return True if False
      file: not.bg
      out: ""
      return: 0
    - name: ">= should return True if greater or equal"
      file: ge.bg
      out: ""
      return: 0
    - name: "< should return True if smaller"
      file: lt.bg
      out: ""
      return: 0
    - name: "<= should return True if smaller or equal"
      file: le.bg
      out: ""
      return: 0
    - name: factorial of 10 should return correct value
      file: factorial.bg
      out: 3628800
      return: 0
    - name: factorial of 10 should return correct value
      file: fibonacci.bg
      out: 267914296
      return: 56

bad-cases:
  path: ../examples/bad
  cases:
