Program. Exps ::= [Exp] ;

EInt.      Exp ::= Integer ;
EBool.     Exp ::= Bool ;
EFunc.     Exp ::= "(" Var [Exp] ")" ;
EInternal. Exp ::= "(" InternalFunc ")" ;
EList.     Exp ::= List ;
EVar.      Exp ::= Var ;
EUnit.     Exp ::= "()" ;

BTrue.  Bool ::= "True" ;
BFalse. Bool ::= "False" ;

LList. List ::= "<|" [Exp] "|>" ;

IFuncDecl. InternalFunc ::= Type Var "[" ArgsList "]" [Exp] ;
ILambda.   InternalFunc ::= Type "[" ArgsList "]" [Exp] ;
IVarDecl.  InternalFunc ::= Type Var Exp ;
ITransact. InternalFunc ::= "transaction" [Exp] ;
IIf.       InternalFunc ::= "if" Exp Exp Exp ;
IWhile.    InternalFunc ::= "while" Exp Exp ;
IWhen.     InternalFunc ::= "when" Exp Exp ;
IConc.     InternalFunc ::= ";" [SameState] ;
IPrint.    InternalFunc ::= "print" [Exp] ;

SState. SameState ::= Exp ;

AList. ArgsList ::= [Arg] ;

AArg. Arg ::= "(" Type Var ")" ;

TInt.  Type ::= "int" ;
TBool. Type ::= "bool" ;
TVar.  Type ::= "var" ;
TList. Type ::= "<|" Type "|>" ;
TUnit. Type ::= "$" ;

token Var ((letter | '_' | '\'' | [".+-/*%?<>=:^;"]) (letter | digit | '_' | '\'' | [".+-/*%?<>=:^;"])*) ;
comment "#" ;
separator Exp " ";
separator Arg " " ;
terminator SameState ";" ;
entrypoints Exps ;
